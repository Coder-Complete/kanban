backend project

kanban
- this is a good project for practicing backend before getting into auth
- this design is pretty simple for a scrum app and ignores a lot of features that jira has

steps
0. x - set up react app w/ vite
1. x - set up vanilla node.js server
  - https://www.section.io/engineering-education/a-raw-nodejs-rest-api-without-frameworks-such-as-express/
2. x - connect backend to frontend
  - https://codedamn.com/news/reactjs/how-to-connect-react-with-node-js
  - https://www.freecodecamp.org/news/3-things-to-consider-before-deploying-your-first-full-stack-app/
  - local is simple: frontend is deployed at port 3000, backend at 5000, frontend requests from 127.0.0.1:5000
3. x - nodemon
4. x - set up db and connect to backend (postgres - can do more, open source. mysql - simpler. companies prefer postgres i'd imagine)
5. deploy and backend is connected to frontend and db is connected to backend
6. build a backend until raw js gets ugly
7. rewrite w/ express (benefits - easy org, plugin libraries)
8. postman
9. define & implement db schemas
10. build the routes
11. build the frontend
12. mention firebase / supabase and other options (pro - easy to get going, con - can get expensive once locked in and app scales)

***** db *****
data tables
- boards
- columns in boards
  - column id
  - board id
- tasks (belong to boards i suppose)
    - title
    - description
    - subtasks
    - status


- boards
  - columns
  - name
- tasks
  - name
  - description
  - time estimate
  - status


my additions
- things jira has that the design doesnâ€™t
- epics and stories?
- projected timelines based on estimates of all the tickets belonging to a story?
- comments on tickets
- 

considerations
- for subtasks - will have to search all tasks under that board, so will need db that supports text search